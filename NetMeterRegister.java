package com.shinetech.nbv.batchXP.pathway.model;

import java.util.Date;
import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Version;

import org.hibernate.annotations.AccessType;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;

import com.shinetech.nbv.batchXP.pathway.model.persistence.NBVVersionType;
	
// NOTE: The following line needs to be added to hibernate.cfg.xml
/*
<mapping class="com.shinetech.nbv.batchXP.pathway.model.NetMeterRegister"/>
*/	
	
/**
 * This class was generated by the Shine Technologies Code Generator
 *
 * This is the NetMeterRegister class
 * 
 * ${table.getComment()}
 * <pre>
 * Change History:
 * Who        When        Description
 * -------------------------------------------------------------------
 * 
 * </pre>
 */
@javax.persistence.SequenceGenerator(name = "ID_SEQ", sequenceName = "REGISTER_ID_SEQ")
@Entity
@AccessType("field")
@TypeDef(name = "NBVVersionType", typeClass=NBVVersionType.class)
@Table(name = "NET_METER_REGISTER")
public class NetMeterRegister implements Serializable
{
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO, generator = "ID_SEQ")
	@Column(name = "REGISTER_ID", precision = 27, scale = 0)
    private Long registerId;	

	@Column(name = "ADD_INFO")    
	private String addInfo;		
	@Column(name = "ASSET_MGMT_PLAN")    
	private String assetMgmtPlan;		
	@Column(name = "CALIBRATION_TABLES")    
	private String calibrationTables;		
	@Column(name = "COMMS_EQUIP_TYPE")    
	private String commsEquipType;		
	@Column(name = "COMMS_PROTOCOL")    
	private String commsProtocol;		
	@Column(name = "CONTRACT_END_DATE")    
	private Date contractEndDate;		
	@Column(name = "CONTRACT_START_DATE")    
	private Date contractStartDate;		
	@Column(name = "DATA_CONVERSION")    
	private String dataConversion;		
	@Column(name = "DATA_VALIDATIONS")    
	private String dataValidations;		
	@Column(name = "ESTIMATION_INSTRUCTIONS")    
	private String estimationInstructions;		
	@Column(name = "FILE_ID")    
	private Long fileId;		
	@Column(name = "LAST_TEST_DATE")    
	private Date lastTestDate;		
	@Version
	@Type(type = "NBVVersionType")
	@Column(name = "LAST_UPDATE_ID")    
	private Long lastUpdateId;		
	@Column(name = "MAINTENANCE_DATE")    
	private Date maintenanceDate;		
	@Column(name = "MANUFACTURER")    
	private String manufacturer;		
	@Column(name = "MEASUREMENT_TYPE")    
	private String measurementType;		
	@Column(name = "METER_CONSTANT")    
	private String meterConstant;		
	@Column(name = "METER_HAZARD")    
	private String meterHazard;		
	@Column(name = "METER_ID")    
	private String meterId;		
	@Column(name = "METER_INSTALLATION_CODE")    
	private String meterInstallationCode;		
	@Column(name = "METER_LOCATION")    
	private String meterLocation;		
	@Column(name = "METER_MODEL")    
	private String meterModel;		
	@Column(name = "METER_POINT")    
	private String meterPoint;		
	@Column(name = "METER_PROGRAM")    
	private String meterProgram;		
	@Column(name = "METER_ROUTE")    
	private String meterRoute;		
	@Column(name = "METER_SERIAL_NUMBER")    
	private String meterSerialNumber;		
	@Column(name = "METER_USE")    
	private String meterUse;		
	@Column(name = "MSATS_CREATION_DATE")    
	private Date msatsCreationDate;		
	@Column(name = "NEXT_SCHEDULED_READ_DATE")    
	private Date nextScheduledReadDate;		
	@Column(name = "NEXT_TEST_DATE")    
	private Date nextTestDate;		
	@Column(name = "PASSWORD")    
	private String password;		
	@Column(name = "READ_TYPE_CODE")    
	private String readTypeCode;		
	@Column(name = "REMOTE_PHONE_NUMBER")    
	private String remotePhoneNumber;		
	@Column(name = "ROW_STATUS_CODE")    
	private String rowStatusCode;		
	@Column(name = "STATUS_CODE")    
	private String statusCode;		
	@Column(name = "TEST_CALIB_PROGRAM")    
	private String testCalibProgram;		
	@Column(name = "TEST_PERFORMED_BY")    
	private String testPerformedBy;		
	@Column(name = "TEST_RESULT_ACCURACY")    
	private Double testResultAccuracy;		
	@Column(name = "TEST_RESULT_NOTES")    
	private String testResultNotes;		
	@Column(name = "TRANSFORMER_LOCATION")    
	private String transformerLocation;		
	@Column(name = "TRANSFORMER_RATIO")    
	private String transformerRatio;		
	@Column(name = "TRANSFORMER_TYPE")    
	private String transformerType;		
	@Column(name = "USER_ACCESS_RIGHTS")    
	private String userAccessRights;		


    /**
     * Free text, descriptive information in relation to the site which describes site access and the relationship between the metering point and the connection point.
     *
     * Sets the value for the ADD_INFO column
     */
    public void setAddInfo(String aAddInfo)
    {
        this.addInfo = aAddInfo;
    }
    
    /**
     * Free text, descriptive information in relation to the site which describes site access and the relationship between the metering point and the connection point.
     *
     * Returns the value for the ADD_INFO column.
     */
    public String getAddInfo()
    {
    	return addInfo;
    }

    /**
     * Asset management plan.
     *
     * Sets the value for the ASSET_MGMT_PLAN column
     */
    public void setAssetMgmtPlan(String aAssetMgmtPlan)
    {
        this.assetMgmtPlan = aAssetMgmtPlan;
    }
    
    /**
     * Asset management plan.
     *
     * Returns the value for the ASSET_MGMT_PLAN column.
     */
    public String getAssetMgmtPlan()
    {
    	return assetMgmtPlan;
    }

    /**
     * Details of any calibration factors programmed into the meter.
     *
     * Sets the value for the CALIBRATION_TABLES column
     */
    public void setCalibrationTables(String aCalibrationTables)
    {
        this.calibrationTables = aCalibrationTables;
    }
    
    /**
     * Details of any calibration factors programmed into the meter.
     *
     * Returns the value for the CALIBRATION_TABLES column.
     */
    public String getCalibrationTables()
    {
    	return calibrationTables;
    }

    /**
     * Used to store baud rate for installed communication equipment in a code.
     *
     * Sets the value for the COMMS_EQUIP_TYPE column
     */
    public void setCommsEquipType(String aCommsEquipType)
    {
        this.commsEquipType = aCommsEquipType;
    }
    
    /**
     * Used to store baud rate for installed communication equipment in a code.
     *
     * Returns the value for the COMMS_EQUIP_TYPE column.
     */
    public String getCommsEquipType()
    {
    	return commsEquipType;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the COMMS_PROTOCOL column
     */
    public void setCommsProtocol(String aCommsProtocol)
    {
        this.commsProtocol = aCommsProtocol;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the COMMS_PROTOCOL column.
     */
    public String getCommsProtocol()
    {
    	return commsProtocol;
    }

    /**
     * Will contain the end date of the information from MSATS.
     *
     * Sets the value for the CONTRACT_END_DATE column
     */
    public void setContractEndDate(Date aContractEndDate)
    {
        this.contractEndDate = aContractEndDate;
    }
    
    /**
     * Will contain the end date of the information from MSATS.
     *
     * Returns the value for the CONTRACT_END_DATE column.
     */
    public Date getContractEndDate()
    {
    	return contractEndDate;
    }

    /**
     * Will contain the start date of the information from MSATS.
     *
     * Sets the value for the CONTRACT_START_DATE column
     */
    public void setContractStartDate(Date aContractStartDate)
    {
        this.contractStartDate = aContractStartDate;
    }
    
    /**
     * Will contain the start date of the information from MSATS.
     *
     * Returns the value for the CONTRACT_START_DATE column.
     */
    public Date getContractStartDate()
    {
    	return contractStartDate;
    }

    /**
     * Actual Pulse Multipliers.
     *
     * Sets the value for the DATA_CONVERSION column
     */
    public void setDataConversion(String aDataConversion)
    {
        this.dataConversion = aDataConversion;
    }
    
    /**
     * Actual Pulse Multipliers.
     *
     * Returns the value for the DATA_CONVERSION column.
     */
    public String getDataConversion()
    {
    	return dataConversion;
    }

    /**
     * Free text description of required data validations.
     *
     * Sets the value for the DATA_VALIDATIONS column
     */
    public void setDataValidations(String aDataValidations)
    {
        this.dataValidations = aDataValidations;
    }
    
    /**
     * Free text description of required data validations.
     *
     * Returns the value for the DATA_VALIDATIONS column.
     */
    public String getDataValidations()
    {
    	return dataValidations;
    }

    /**
     * Free text description of estimation instructions.
     *
     * Sets the value for the ESTIMATION_INSTRUCTIONS column
     */
    public void setEstimationInstructions(String aEstimationInstructions)
    {
        this.estimationInstructions = aEstimationInstructions;
    }
    
    /**
     * Free text description of estimation instructions.
     *
     * Returns the value for the ESTIMATION_INSTRUCTIONS column.
     */
    public String getEstimationInstructions()
    {
    	return estimationInstructions;
    }

    /**
     * Unique id assigned to the file.  The input file that this record was in.
     *
     * Sets the value for the FILE_ID column
     */
    public void setFileId(Long aFileId)
    {
        this.fileId = aFileId;
    }
    
    /**
     * Unique id assigned to the file.  The input file that this record was in.
     *
     * Returns the value for the FILE_ID column.
     */
    public Long getFileId()
    {
    	return fileId;
    }

    /**
     * The date on which the installation was last tested or inspected by the Metering Provider.
     *
     * Sets the value for the LAST_TEST_DATE column
     */
    public void setLastTestDate(Date aLastTestDate)
    {
        this.lastTestDate = aLastTestDate;
    }
    
    /**
     * The date on which the installation was last tested or inspected by the Metering Provider.
     *
     * Returns the value for the LAST_TEST_DATE column.
     */
    public Date getLastTestDate()
    {
    	return lastTestDate;
    }

    /**
     * This column is used to solve concurrency issue.  In update and delete sql, this has to be compared with the selected value.
     *
     * Sets the value for the LAST_UPDATE_ID column
     */
    public void setLastUpdateId(Long aLastUpdateId)
    {
        this.lastUpdateId = aLastUpdateId;
    }
    
    /**
     * This column is used to solve concurrency issue.  In update and delete sql, this has to be compared with the selected value.
     *
     * Returns the value for the LAST_UPDATE_ID column.
     */
    public Long getLastUpdateId()
    {
    	return lastUpdateId;
    }

    /**
     * Date and time the record was updated.
     *
     * Sets the value for the MAINTENANCE_DATE column
     */
    public void setMaintenanceDate(Date aMaintenanceDate)
    {
        this.maintenanceDate = aMaintenanceDate;
    }
    
    /**
     * Date and time the record was updated.
     *
     * Returns the value for the MAINTENANCE_DATE column.
     */
    public Date getMaintenanceDate()
    {
    	return maintenanceDate;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the MANUFACTURER column
     */
    public void setManufacturer(String aManufacturer)
    {
        this.manufacturer = aManufacturer;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the MANUFACTURER column.
     */
    public String getManufacturer()
    {
    	return manufacturer;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the MEASUREMENT_TYPE column
     */
    public void setMeasurementType(String aMeasurementType)
    {
        this.measurementType = aMeasurementType;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the MEASUREMENT_TYPE column.
     */
    public String getMeasurementType()
    {
    	return measurementType;
    }

    /**
     * Meter Constant.
     *
     * Sets the value for the METER_CONSTANT column
     */
    public void setMeterConstant(String aMeterConstant)
    {
        this.meterConstant = aMeterConstant;
    }
    
    /**
     * Meter Constant.
     *
     * Returns the value for the METER_CONSTANT column.
     */
    public String getMeterConstant()
    {
    	return meterConstant;
    }

    /**
     * Free text or code which identifies hazards associated with reading the meter.
     *
     * Sets the value for the METER_HAZARD column
     */
    public void setMeterHazard(String aMeterHazard)
    {
        this.meterHazard = aMeterHazard;
    }
    
    /**
     * Free text or code which identifies hazards associated with reading the meter.
     *
     * Returns the value for the METER_HAZARD column.
     */
    public String getMeterHazard()
    {
    	return meterHazard;
    }

    /**
     * Will contain the NMI, no checksum.
     *
     * Sets the value for the METER_ID column
     */
    public void setMeterId(String aMeterId)
    {
        this.meterId = aMeterId;
    }
    
    /**
     * Will contain the NMI, no checksum.
     *
     * Returns the value for the METER_ID column.
     */
    public String getMeterId()
    {
    	return meterId;
    }

    /**
     * As per MSATS Installation Type Code
     *
     * Sets the value for the METER_INSTALLATION_CODE column
     */
    public void setMeterInstallationCode(String aMeterInstallationCode)
    {
        this.meterInstallationCode = aMeterInstallationCode;
    }
    
    /**
     * As per MSATS Installation Type Code
     *
     * Returns the value for the METER_INSTALLATION_CODE column.
     */
    public String getMeterInstallationCode()
    {
    	return meterInstallationCode;
    }

    /**
     * Free text descriptive material which identifies the relationship between the location of the metering point and the connection point.
     *
     * Sets the value for the METER_LOCATION column
     */
    public void setMeterLocation(String aMeterLocation)
    {
        this.meterLocation = aMeterLocation;
    }
    
    /**
     * Free text descriptive material which identifies the relationship between the location of the metering point and the connection point.
     *
     * Returns the value for the METER_LOCATION column.
     */
    public String getMeterLocation()
    {
    	return meterLocation;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the METER_MODEL column
     */
    public void setMeterModel(String aMeterModel)
    {
        this.meterModel = aMeterModel;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the METER_MODEL column.
     */
    public String getMeterModel()
    {
    	return meterModel;
    }

    /**
     * Identifies the meter uniquely for the NMI.
     *
     * Sets the value for the METER_POINT column
     */
    public void setMeterPoint(String aMeterPoint)
    {
        this.meterPoint = aMeterPoint;
    }
    
    /**
     * Identifies the meter uniquely for the NMI.
     *
     * Returns the value for the METER_POINT column.
     */
    public String getMeterPoint()
    {
    	return meterPoint;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the METER_PROGRAM column
     */
    public void setMeterProgram(String aMeterProgram)
    {
        this.meterProgram = aMeterProgram;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the METER_PROGRAM column.
     */
    public String getMeterProgram()
    {
    	return meterProgram;
    }

    /**
     * The route identifier the meter is currently being read in.
     *
     * Sets the value for the METER_ROUTE column
     */
    public void setMeterRoute(String aMeterRoute)
    {
        this.meterRoute = aMeterRoute;
    }
    
    /**
     * The route identifier the meter is currently being read in.
     *
     * Returns the value for the METER_ROUTE column.
     */
    public String getMeterRoute()
    {
    	return meterRoute;
    }

    /**
     * Meter serial number from MSATS
     *
     * Sets the value for the METER_SERIAL_NUMBER column
     */
    public void setMeterSerialNumber(String aMeterSerialNumber)
    {
        this.meterSerialNumber = aMeterSerialNumber;
    }
    
    /**
     * Meter serial number from MSATS
     *
     * Returns the value for the METER_SERIAL_NUMBER column.
     */
    public String getMeterSerialNumber()
    {
    	return meterSerialNumber;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the METER_USE column
     */
    public void setMeterUse(String aMeterUse)
    {
        this.meterUse = aMeterUse;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the METER_USE column.
     */
    public String getMeterUse()
    {
    	return meterUse;
    }

    /**
     * The date the entry was created in MSATS.
     *
     * Sets the value for the MSATS_CREATION_DATE column
     */
    public void setMsatsCreationDate(Date aMsatsCreationDate)
    {
        this.msatsCreationDate = aMsatsCreationDate;
    }
    
    /**
     * The date the entry was created in MSATS.
     *
     * Returns the value for the MSATS_CREATION_DATE column.
     */
    public Date getMsatsCreationDate()
    {
    	return msatsCreationDate;
    }

    /**
     * Indicates the scheduled next read date for the meter if a manual read is required.
     *
     * Sets the value for the NEXT_SCHEDULED_READ_DATE column
     */
    public void setNextScheduledReadDate(Date aNextScheduledReadDate)
    {
        this.nextScheduledReadDate = aNextScheduledReadDate;
    }
    
    /**
     * Indicates the scheduled next read date for the meter if a manual read is required.
     *
     * Returns the value for the NEXT_SCHEDULED_READ_DATE column.
     */
    public Date getNextScheduledReadDate()
    {
    	return nextScheduledReadDate;
    }

    /**
     * Next date on which the meter should be tested.
     *
     * Sets the value for the NEXT_TEST_DATE column
     */
    public void setNextTestDate(Date aNextTestDate)
    {
        this.nextTestDate = aNextTestDate;
    }
    
    /**
     * Next date on which the meter should be tested.
     *
     * Returns the value for the NEXT_TEST_DATE column.
     */
    public Date getNextTestDate()
    {
    	return nextTestDate;
    }

    /**
     * Read and Time Set Passwords separated by a space.
     *
     * Sets the value for the PASSWORD column
     */
    public void setPassword(String aPassword)
    {
        this.password = aPassword;
    }
    
    /**
     * Read and Time Set Passwords separated by a space.
     *
     * Returns the value for the PASSWORD column.
     */
    public String getPassword()
    {
    	return password;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the READ_TYPE_CODE column
     */
    public void setReadTypeCode(String aReadTypeCode)
    {
        this.readTypeCode = aReadTypeCode;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the READ_TYPE_CODE column.
     */
    public String getReadTypeCode()
    {
    	return readTypeCode;
    }

    /**
     * Artificial Primary Key, Sequence Fed.
     *
     * Sets the value for the REGISTER_ID column
     */
    public void setRegisterId(Long aRegisterId)
    {
        this.registerId = aRegisterId;
    }
    
    /**
     * Artificial Primary Key, Sequence Fed.
     *
     * Returns the value for the REGISTER_ID column.
     */
    public Long getRegisterId()
    {
    	return registerId;
    }

    /**
     * The PSTN number to contact a remote site for metering data. Includes STD prefix and no spaces.
     *
     * Sets the value for the REMOTE_PHONE_NUMBER column
     */
    public void setRemotePhoneNumber(String aRemotePhoneNumber)
    {
        this.remotePhoneNumber = aRemotePhoneNumber;
    }
    
    /**
     * The PSTN number to contact a remote site for metering data. Includes STD prefix and no spaces.
     *
     * Returns the value for the REMOTE_PHONE_NUMBER column.
     */
    public String getRemotePhoneNumber()
    {
    	return remotePhoneNumber;
    }

    /**
     * Indicates whether the record is active or inactive.
     *
     * Sets the value for the ROW_STATUS_CODE column
     */
    public void setRowStatusCode(String aRowStatusCode)
    {
        this.rowStatusCode = aRowStatusCode;
    }
    
    /**
     * Indicates whether the record is active or inactive.
     *
     * Returns the value for the ROW_STATUS_CODE column.
     */
    public String getRowStatusCode()
    {
    	return rowStatusCode;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the STATUS_CODE column
     */
    public void setStatusCode(String aStatusCode)
    {
        this.statusCode = aStatusCode;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the STATUS_CODE column.
     */
    public String getStatusCode()
    {
    	return statusCode;
    }

    /**
     * Test and calibration program.
     *
     * Sets the value for the TEST_CALIB_PROGRAM column
     */
    public void setTestCalibProgram(String aTestCalibProgram)
    {
        this.testCalibProgram = aTestCalibProgram;
    }
    
    /**
     * Test and calibration program.
     *
     * Returns the value for the TEST_CALIB_PROGRAM column.
     */
    public String getTestCalibProgram()
    {
    	return testCalibProgram;
    }

    /**
     * Identifying the Metering Provider “B” and the technician responsible for conducting the last test.
     *
     * Sets the value for the TEST_PERFORMED_BY column
     */
    public void setTestPerformedBy(String aTestPerformedBy)
    {
        this.testPerformedBy = aTestPerformedBy;
    }
    
    /**
     * Identifying the Metering Provider “B” and the technician responsible for conducting the last test.
     *
     * Returns the value for the TEST_PERFORMED_BY column.
     */
    public String getTestPerformedBy()
    {
    	return testPerformedBy;
    }

    /**
     * The accuracy figure from the test performed on the date indicated in the LastTestDate field.
     *
     * Sets the value for the TEST_RESULT_ACCURACY column
     */
    public void setTestResultAccuracy(Double aTestResultAccuracy)
    {
        this.testResultAccuracy = aTestResultAccuracy;
    }
    
    /**
     * The accuracy figure from the test performed on the date indicated in the LastTestDate field.
     *
     * Returns the value for the TEST_RESULT_ACCURACY column.
     */
    public Double getTestResultAccuracy()
    {
    	return testResultAccuracy;
    }

    /**
     * A statement of compliance indicating the standard of the test regime applied at the time of the last test.
     *
     * Sets the value for the TEST_RESULT_NOTES column
     */
    public void setTestResultNotes(String aTestResultNotes)
    {
        this.testResultNotes = aTestResultNotes;
    }
    
    /**
     * A statement of compliance indicating the standard of the test regime applied at the time of the last test.
     *
     * Returns the value for the TEST_RESULT_NOTES column.
     */
    public String getTestResultNotes()
    {
    	return testResultNotes;
    }

    /**
     * A free text field to identify the existence of instrument transformers and their location relative to the market connection point.
     *
     * Sets the value for the TRANSFORMER_LOCATION column
     */
    public void setTransformerLocation(String aTransformerLocation)
    {
        this.transformerLocation = aTransformerLocation;
    }
    
    /**
     * A free text field to identify the existence of instrument transformers and their location relative to the market connection point.
     *
     * Returns the value for the TRANSFORMER_LOCATION column.
     */
    public String getTransformerLocation()
    {
    	return transformerLocation;
    }

    /**
     * A statement of the available and applied transformer ratios.
     *
     * Sets the value for the TRANSFORMER_RATIO column
     */
    public void setTransformerRatio(String aTransformerRatio)
    {
        this.transformerRatio = aTransformerRatio;
    }
    
    /**
     * A statement of the available and applied transformer ratios.
     *
     * Returns the value for the TRANSFORMER_RATIO column.
     */
    public String getTransformerRatio()
    {
    	return transformerRatio;
    }

    /**
     * As per MSATS.
     *
     * Sets the value for the TRANSFORMER_TYPE column
     */
    public void setTransformerType(String aTransformerType)
    {
        this.transformerType = aTransformerType;
    }
    
    /**
     * As per MSATS.
     *
     * Returns the value for the TRANSFORMER_TYPE column.
     */
    public String getTransformerType()
    {
    	return transformerType;
    }

    /**
     * Details of any end use consumer access to the metering installation.
     *
     * Sets the value for the USER_ACCESS_RIGHTS column
     */
    public void setUserAccessRights(String aUserAccessRights)
    {
        this.userAccessRights = aUserAccessRights;
    }
    
    /**
     * Details of any end use consumer access to the metering installation.
     *
     * Returns the value for the USER_ACCESS_RIGHTS column.
     */
    public String getUserAccessRights()
    {
    	return userAccessRights;
    }

}
